// Code generated by sqlc. DO NOT EDIT.
// source: chair.sql

package mysql

import (
	"context"
	"database/sql"
)

const createChair = `-- name: CreateChair :exec
INSERT INTO chair(id, name, description, thumbnail, price, height, width, depth, color, features, kind, popularity, stock) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)
`

type CreateChairParams struct {
	ID          int64
	Name        string
	Description string
	Thumbnail   string
	Price       sql.NullInt32
	Height      sql.NullInt32
	Width       sql.NullInt32
	Depth       sql.NullInt32
	Color       sql.NullString
	Features    sql.NullString
	Kind        sql.NullString
	Popularity  int32
	Stock       int32
}

func (q *Queries) CreateChair(ctx context.Context, arg CreateChairParams) error {
	_, err := q.db.ExecContext(ctx, createChair,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Thumbnail,
		arg.Price,
		arg.Height,
		arg.Width,
		arg.Depth,
		arg.Color,
		arg.Features,
		arg.Kind,
		arg.Popularity,
		arg.Stock,
	)
	return err
}

const getChair = `-- name: GetChair :one
SELECT id, name, description, thumbnail, price, height, width, depth, color, features, kind, popularity, stock FROM chair WHERE id = ?
`

func (q *Queries) GetChair(ctx context.Context, id int64) (Chair, error) {
	row := q.db.QueryRowContext(ctx, getChair, id)
	var i Chair
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Thumbnail,
		&i.Price,
		&i.Height,
		&i.Width,
		&i.Depth,
		&i.Color,
		&i.Features,
		&i.Kind,
		&i.Popularity,
		&i.Stock,
	)
	return i, err
}

const getExistChair = `-- name: GetExistChair :one
SELECT id, name, description, thumbnail, price, height, width, depth, color, features, kind, popularity, stock FROM chair WHERE id = ? AND stock > 0
`

func (q *Queries) GetExistChair(ctx context.Context, id int64) (Chair, error) {
	row := q.db.QueryRowContext(ctx, getExistChair, id)
	var i Chair
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Thumbnail,
		&i.Price,
		&i.Height,
		&i.Width,
		&i.Depth,
		&i.Color,
		&i.Features,
		&i.Kind,
		&i.Popularity,
		&i.Stock,
	)
	return i, err
}

const listChairWithCondtion = `-- name: ListChairWithCondtion :many
SELECT id, name, description, thumbnail, price, height, width, depth, color, features, kind, popularity, stock FROM chair
WHERE 
    (price > ? OR sqlc.arg(min_price) IS NULL)
AND (price <= ? OR sqlc.arg(max_price) IS NULL)
AND (height > ? OR sqlc.arg(min_height) IS NULL)
AND (height <= ? OR sqlc.arg(max_height) IS NULL)
AND (width > ? OR sqlc.arg(min_width) IS NULL)
AND (width <= ? OR sqlc.arg(max_width) IS NULL)
AND (width > ? OR sqlc.arg(min_depth) IS NULL)
AND (width <= ? OR sqlc.arg(max_depth) IS NULL)
AND (kind = ? OR sqlc.arg(kind) IS NULL)
AND (color = ? OR sqlc.arg(color) IS NULL)
AND (features = ? OR sqlc.arg(features) IS NULL)
ORDER BY popularity DESC, id ASC
`

type ListChairWithCondtionParams struct {
	MinPrice  sql.NullInt32
	MaxPrice  sql.NullInt32
	MinHeight sql.NullInt32
	MaxHeight sql.NullInt32
	MinWidth  sql.NullInt32
	MaxWidth  sql.NullInt32
	MinDepth  sql.NullInt32
	MaxDepth  sql.NullInt32
	Kind      sql.NullString
	Color     sql.NullString
	Features  sql.NullString
}

func (q *Queries) ListChairWithCondtion(ctx context.Context, arg ListChairWithCondtionParams) ([]Chair, error) {
	rows, err := q.db.QueryContext(ctx, listChairWithCondtion,
		arg.MinPrice,
		arg.MaxPrice,
		arg.MinHeight,
		arg.MaxHeight,
		arg.MinWidth,
		arg.MaxWidth,
		arg.MinDepth,
		arg.MaxDepth,
		arg.Kind,
		arg.Color,
		arg.Features,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chair
	for rows.Next() {
		var i Chair
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Thumbnail,
			&i.Price,
			&i.Height,
			&i.Width,
			&i.Depth,
			&i.Color,
			&i.Features,
			&i.Kind,
			&i.Popularity,
			&i.Stock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChairForPurchase = `-- name: UpdateChairForPurchase :exec
UPDATE chair SET stock = stock - 1 WHERE id = ?
`

func (q *Queries) UpdateChairForPurchase(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateChairForPurchase, id)
	return err
}
